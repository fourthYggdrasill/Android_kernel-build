name: Alioth DCandKSU Kernel

on:
  workflow_dispatch:
    inputs:
      KERNEL_SOURCE:
        description: 'Kernel Source'
        required: true
        default: 'fourthYggdrasill/kernel_alioth'
      KERNEL_SOURCE_BRANCH:
        description: 'Branch'
        required: true
        default: 'aries'
      KERNEL_DEFCONFIG:
        description: 'Defconfig'
        required: true
        default: 'alioth_defconfig'
      CLANG_URL:
        description: 'Clang URL'
        required: true
        default: 'https://raw.githubusercontent.com/ZyCromerZ/Clang/main/Clang-main-link.txt'
      # PERSONAL_TOKEN:
      #   description: 'Personal access token'
      #   required: true
      #   default: ''
      USE_KERNELSU:
        description: 'Use KernelSU'
        required: true
        default: true
        type: boolean
      USE_KERNELSU_DEBUG:
        description: 'Use KernelSU Debug'
        required: true
        default: false
        type: boolean


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup Configuration
      run: |
        echo "KERNEL_SOURCE=${{ github.event.inputs.KERNEL_SOURCE }}" >> $GITHUB_ENV
        echo "KERNEL_SOURCE_BRANCH=${{ github.event.inputs.KERNEL_SOURCE_BRANCH }}" >> $GITHUB_ENV
        echo "KERNEL_DEFCONFIG=${{ github.event.inputs.KERNEL_DEFCONFIG }}" >> $GITHUB_ENV
        echo "CLANG_URL=${{ github.event.inputs.CLANG_URL }}" >> $GITHUB_ENV
        # echo "PERSONAL_TOKEN=${{ github.event.inputs.PERSONAL_TOKEN }}" >> $GITHUB_ENV
        echo "USE_KERNELSU=${{ github.event.inputs.USE_KERNELSU }}" >> $GITHUB_ENV
        echo "USE_KERNELSU_DEBUG=${{ github.event.inputs.USE_KERNELSU_DEBUG }}" >> $GITHUB_ENV

    - name: Setup Build Environment
      run: |
        echo "BUILD_TIME=$(TZ=Asia/Shanghai date "+%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "DEVICE=$(echo ${{ env.KERNEL_DEFCONFIG }} | sed 's!vendor/!!;s/_defconfig//;s/_user//;s/-perf//')" >> $GITHUB_ENV
        sudo apt-get update
        sudo apt-get install bc bison build-essential ccache curl flex g++-multilib gcc-multilib git gnupg gperf libfuse-dev lib32readline-dev lib32z1-dev liblz4-tool libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev libc6-dev-i386 libncurses6 libncursesw6 lib32ncurses-dev lib32ncurses6 lib32ncursesw6 libncurses5-dev x11proto-core-dev libx11-dev libgl1-mesa-dev unzip fontconfig make

    - name: Download Clang Toolchain
      run: |
        mkdir clang
        wget -q $(curl ${{ env.CLANG_URL }}) -O clang.tar.gz
        tar -C clang/ -zxf clang.tar.gz

    - name: Checkout Kernel
      uses: actions/checkout@v4
      with:
        # token: ${{env.PERSONAL_TOKEN}}
        github-server-url: 'https://github.com'
        repository: ${{ env.KERNEL_SOURCE }}
        ref: ${{ env.KERNEL_SOURCE_BRANCH }}
        submodules: recursive
        path: kernel-source

    - name: Checkout AnyKernel3
      uses: actions/checkout@v4
      with:
        # token: ${{env.PERSONAL_TOKEN}}
        repository: fourthYggdrasill/AnyKernel3
        path: kernel-source/AnyKernel3

    - name: Setup KernelSU
      if: env.USE_KERNELSU == 'true'
      run: |
        cd kernel-source
           # git apply AnyKernel3/patch/KernelSU.patch
           # git apply AnyKernel3/patch/patch.sh
            bash AnyKernel3/patch/patch.sh
            echo "CONFIG_KSU=y" >> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
            curl -LSs "https://raw.githubusercontent.com/fourthYggdrasill/KernelSU/main/kernel/setup.sh" | bash -s main
           # curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -
            echo "UPLOADNAME=-KernelSU" >> $GITHUB_ENV
            if [ ${{ env.USE_KERNELSU_DEBUG }} = true ]; then
              echo "CONFIG_KSU_DEBUG=y" >> arch/arm64/configs/${{ env.KERNEL_DEFCONFIG }}
            fi

    - name: Build Kernel
      run: |
        cd kernel-source
        export PATH=$GITHUB_WORKSPACE/clang/bin:$PATH
        export KBUILD_BUILD_HOST=AL1S
        export KBUILD_BUILD_USER=awainatsu
        make -j$(nproc --all) O=out ARCH=arm64 CC=clang ${{ env.KERNEL_DEFCONFIG }}

        scripts/config --file out/.config \
          -e THINLTO \
          -e LTO_CLANG \
          -d CONFIG_CFI_CLANG \
          -d CFI_PERMISSIVE \
          -d CFI_CLANG \
          -e COMPAT_VDSO \
          -e SHADOW_CALL_STACK \
          -e SHADOW_CALL_STACK_VMAP \
          -e RELR

        make -j$(nproc --all) O=out ARCH=arm64 CC=clang LLVM=1 LLVM_IAS=1 \
          CLANG_TRIPLE=aarch64-linux-gnu- \
          CROSS_COMPILE=aarch64-linux-gnu- \
          CROSS_COMPILE_COMPAT=arm-linux-gnueabi-

    - name: Pack Kernel
      run: |
        cd kernel-source
        cp out/arch/arm64/boot/Image AnyKernel3
        # cp out/arch/arm64/boot/dtbo.img AnyKernel3
       
    - name: Upload Kernel
      uses: actions/upload-artifact@v4
      with:
        name: Pack-${{ env.BUILD_TIME }}
        path: 
          kernel-source/AnyKernel3/
          !kernel-source/AnyKernel3/*.git*
          !kernel-source/AnyKernel3/patch
          !kernel-source/AnyKernel3/modules
          !kernel-source/AnyKernel3/ramdisk
        compression-level: 9
